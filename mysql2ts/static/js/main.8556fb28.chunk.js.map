{"version":3,"sources":["App.tsx","tableToInterface.ts","index.tsx"],"names":["App","useState","src","setSrc","onSrcChange","useCallback","e","target","value","dest","useMemo","split","map","l","trim","filter","parts","length","name","type","nullable","c","t","indexOf","join","onChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qKAGaA,EAAgB,WAC3B,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KAEMC,EAAcC,uBAClB,SAACC,GACCH,EAAOG,EAAEC,OAAOC,SAElB,IAGIC,EAAOC,mBAAQ,kBAAuBR,ECEzCS,MAAM,MACNC,KAAI,SAACC,GAAD,OAAOA,EAAEC,OAAOH,MAAM,SAC1BI,QAAO,SAACC,GAAD,OAAWA,EAAMC,QAAU,KAElBL,KAAI,SAACI,GACtB,kBAA+BA,EAA/B,GACA,MAAO,CACLE,KAFF,KAGEC,KAHF,KAIEC,SAAuB,QAJzB,SAUGR,KACC,SAACS,GAAD,gBAAUA,EAAEH,KAAZ,cA/BUI,EA+BoBD,EAAEF,MA9BZ,IAAtBG,EAAEC,QAAQ,OACL,UAEkB,IAAvBD,EAAEC,QAAQ,UAAyC,IAAvBD,EAAEC,QAAQ,QACjC,UAEkB,IAAvBD,EAAEC,QAAQ,SAAwB,cAAND,EACvB,OAEFA,IAqBD,OAAwCD,EAAED,SAAW,UAAY,GAAjE,KA/BS,IAACE,KAiCXE,KAAK,MAAQ,ODpBgC,CAACtB,IAEnD,OACE,qCACE,0BAAUM,MAAON,EAAKuB,SAAUrB,IAChC,0BAAUI,MAAOC,QEZvBiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.8556fb28.chunk.js","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\nimport { tableToInterface } from './tableToInterface';\n\nexport const App: React.FC = () => {\n  const [src, setSrc] = useState('');\n\n  const onSrcChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n      setSrc(e.target.value);\n    },\n    []\n  );\n\n  const dest = useMemo(() => tableToInterface(src), [src]);\n\n  return (\n    <>\n      <textarea value={src} onChange={onSrcChange} />\n      <textarea value={dest} />\n    </>\n  );\n};\n","const mapTypes = (t: string) => {\n  if (t.indexOf('int') !== -1) {\n    return 'number';\n  }\n  if (t.indexOf('char') !== -1 || t.indexOf('text') !== -1) {\n    return 'string';\n  }\n  if (t.indexOf('date') !== -1 || t === 'timestamp') {\n    return 'Date';\n  }\n  return t;\n};\n\nexport const tableToInterface = (s: string) => {\n  const lines = s\n    .split('\\n')\n    .map((l) => l.trim().split('\\t'))\n    .filter((parts) => parts.length >= 3);\n\n  const cols = lines.map((parts) => {\n    const [name, type, nullable] = parts;\n    return {\n      name,\n      type,\n      nullable: nullable === 'YES',\n    };\n  });\n\n  return (\n    cols\n      .map(\n        (c) => `${c.name}: ${mapTypes(c.type)}${c.nullable ? ' | null' : ''};`\n      )\n      .join('\\n') + '\\n'\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}